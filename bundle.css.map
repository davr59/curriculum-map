{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from \"svelte\";\n  import * as d3 from \"d3\";\n  import data from \"./data.json\";\n\n  let result;\n  let textAreaJson;\n\n  const initialTextAreaJson = JSON.stringify(data);\n\n  function onTextAreaChange() {\n    updateMap();\n  }\n\n  function print() {\n    window.print();\n  }\n\n  onMount(async () => {\n    textAreaJson = initialTextAreaJson;\n    updateMap();\n  });\n\n  const elementWidth = 6;\n  const elementHeight = 1.75;\n  const elementRadius = 1;\n  const elementX = elementWidth * 0.4;\n  const elementY = elementHeight / 4;\n  const strokeWidth = 0.03;\n  const fontSize = elementWidth / 15;\n  const titleBX = elementWidth / 2;\n  const titleBY = elementHeight / 3;\n  const nameBX = elementWidth / 2;\n  const nameBY = (elementHeight / 3) * 2;\n  const maxLength = 22;\n\n  function updateMap() {\n    const data = JSON.parse(textAreaJson);\n    const resultNode = getResultNode();\n    const resultSvg = buildResultNodeSvg(resultNode);\n\n    for (let index = 0; index < data.length; index++) {\n      const group = resultSvg.append(\"g\");\n      group\n        .selectAll()\n        .data(data[index])\n        .enter()\n        .append(\"rect\")\n        .attr(\"width\", elementWidth)\n        .attr(\"height\", elementHeight)\n        .attr(\"x\", (d, i) => index * (elementWidth + elementX))\n        .attr(\"y\", (d, i) => i * (elementHeight + elementY))\n        .attr(\"rx\", elementRadius)\n        .attr(\"fill-opacity\", 0)\n        .attr(\"stroke\", \"black\")\n        .attr(\"stroke-width\", strokeWidth)\n        .transition()\n        .attr(\"fill\", \"green\")\n        .duration(5000);\n      group\n        .selectAll()\n        .data(data[index])\n        .enter()\n        .append(\"text\")\n        .attr(\"x\", (d, i) => index * (elementWidth + elementX) + titleBX)\n        .attr(\"y\", (d, i) => i * (elementHeight + elementY) + titleBY)\n        .attr(\"font-family\", \"monospace\")\n        .attr(\"font-size\", (d, i) => fontSize)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text((d, i) => buildText(d.code));\n      group\n        .selectAll()\n        .data(data[index])\n        .enter()\n        .append(\"text\")\n        .attr(\"x\", (d, i) => index * (elementWidth + elementX) + nameBX)\n        .attr(\"y\", (d, i) => i * (elementHeight + elementY) + nameBY)\n        .attr(\"font-family\", \"monospace\")\n        .attr(\"font-size\", (d, i) => fontSize)\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .text((d, i) => buildText(d.name));\n    }\n  }\n\n  function getResultNode() {\n    const resultNode = d3.select(result);\n    resultNode.html(\"\");\n    resultNode.style(\"width\", \"100vw\").style(\"height\", \"100vh\");\n    return resultNode;\n  }\n\n  function buildResultNodeSvg(container) {\n    return container.append(\"svg\").attr(\"viewBox\", \"-0.1 -0.1 100 100\");\n  }\n\n  function buildText(text) {\n    return text.length <= maxLength\n      ? text\n      : `${text.substr(0, maxLength - 3)}...`;\n  }\n</script>\n\n<style>\n  main {\n    text-align: center;\n  }\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n    margin: 8px 0 8px 0;\n  }\n  .divTextArea {\n    margin: 0 16px 16px 16px;\n  }\n  textarea {\n    width: 100%;\n    margin: 0;\n  }\n  button {\n    margin: 0 0 16px 0;\n  }\n  .divMap {\n  }\n  @media print {\n    .noprint {\n      display: none;\n    }\n  }\n</style>\n\n<main>\n  <div class={'noprint'}>\n    <form>\n      <h1>MAPA DE CURSOS | COURSES MAP</h1>\n      <div class={'divTextArea'}>\n        <textarea\n          placeholder=\"JSON\"\n          rows=\"8\"\n          bind:value={textAreaJson}\n          on:keyup={onTextAreaChange} />\n      </div>\n      <button on:click={print}>Imprimir | Print</button>\n    </form>\n  </div>\n  <div class={'divMap'}>\n    <div bind:this={result} />\n  </div>\n</main>\n"
  ],
  "names": [],
  "mappings": "AAyGE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AACrB,CAAC,AACD,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,AAC1B,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,AACX,CAAC,AACD,MAAM,eAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACpB,CAAC,AACD,OAAO,eAAC,CAAC,AACT,CAAC,AACD,OAAO,KAAK,AAAC,CAAC,AACZ,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,AACf,CAAC,AACH,CAAC"
}